// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  password      String
  role          Role         @default(STUDENT)
  profile       Profile?
  taughtCourses Course[]     @relation("FacultyCourses")
  enrollments   Enrollment[] @relation("StudentEnrollments")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Profile {
  id              String            @id @default(cuid())
  firstName       String
  lastName        String
  dateOfBirth     DateTime
  phone           String?
  address         String?
  studentId       String?           @unique // School-provided student ID
  schoolYear      Int? // Current year level
  isVerified      Boolean           @default(false) // Whether documents are verified
  userId          String            @unique
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents       Document[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  StudentDocument StudentDocument[]
}

model Program {
  id           String        @id @default(cuid())
  name         String
  description  String
  department   String
  duration     Int // in months
  applications Application[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Application {
  id          String            @id @default(cuid())
  programId   String
  program     Program           @relation(fields: [programId], references: [id])
  applicantId String
  status      ApplicationStatus @default(PENDING)
  submittedAt DateTime          @default(now())
  documents   Document[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Document {
  id            String             @id @default(cuid())
  type          DocumentType
  fileUrl       String
  status        VerificationStatus @default(PENDING)
  profileId     String
  profile       Profile            @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  Application   Application?       @relation(fields: [applicationId], references: [id])
  applicationId String?

  @@index([profileId])
}

model StudentDocument {
  id        String             @id @default(cuid())
  type      DocumentType
  fileUrl   String
  status    VerificationStatus @default(PENDING)
  profileId String
  profile   Profile            @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@index([profileId])
}

enum Role {
  ADMIN
  FACULTY
  STUDENT
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  ACCEPTED
  REJECTED
  WAITLISTED
}

enum DocumentType {
  TOR
  BIRTH_CERTIFICATE
  GRADES
  CLEARANCE
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

model Course {
  id          String          @id @default(cuid())
  code        String          @unique // e.g., CS101
  name        String
  description String
  credits     Int
  capacity    Int
  facultyId   String?
  faculty     User?           @relation("FacultyCourses", fields: [facultyId], references: [id])
  enrollments Enrollment[]
  sections    CourseSection[]
  semester    String // FIRST, SECOND, or SUMMER
  year        Int // Academic year (1-4)
  status      CourseStatus    @default(OPEN)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Prerequisites relationship
  prerequisites   Course[] @relation("CoursePrerequisites")
  prerequisiteFor Course[] @relation("CoursePrerequisites")

  @@index([facultyId])
}

model CourseSection {
  id          String       @id @default(cuid())
  sectionCode String // e.g., A, B, C
  courseId    String
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  schedule    String // e.g., "Mon, Wed 10:00 AM - 11:30 AM"
  room        String // e.g., "Room 101"
  maxStudents Int
  enrollments Enrollment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([courseId, sectionCode])
  @@index([courseId])
}

model Enrollment {
  id        String           @id @default(cuid())
  studentId String
  student   User             @relation("StudentEnrollments", fields: [studentId], references: [id])
  courseId  String
  course    Course           @relation(fields: [courseId], references: [id])
  sectionId String?
  section   CourseSection?   @relation(fields: [sectionId], references: [id])
  status    EnrollmentStatus @default(PENDING)
  grade     String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@unique([studentId, courseId])
  @@index([studentId])
  @@index([courseId])
  @@index([sectionId])
}

enum CourseStatus {
  OPEN
  CLOSED
  CANCELLED
}

enum EnrollmentStatus {
  PENDING
  APPROVED
  REJECTED
  WITHDRAWN
  COMPLETED
}
