generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  password      String
  role          String       @default("STUDENT")
  isSystemUser  Boolean      @default(false) // Flag for system-created users like the hard-coded super admin
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  taughtCourses Course[]     @relation("FacultyCourses")
  enrollments   Enrollment[] @relation("StudentEnrollments")
  profile       Profile?
}

model Profile {
  id              String            @id @default(cuid())
  firstName       String
  lastName        String
  dateOfBirth     DateTime
  phone           String?
  address         String?
  studentId       String?           @unique
  schoolYear      Int?
  isVerified      Boolean           @default(false)
  userId          String            @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  documents       Document[]
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  StudentDocument StudentDocument[]
}

model Program {
  id           String        @id @default(cuid())
  name         String
  description  String
  department   String
  duration     Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  applications Application[]
}

model Application {
  id          String     @id @default(cuid())
  programId   String
  applicantId String
  status      String     @default("PENDING")
  submittedAt DateTime   @default(now())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  program     Program    @relation(fields: [programId], references: [id])
  documents   Document[]
}

model Document {
  id            String       @id @default(cuid())
  type          String
  fileUrl       String
  status        String       @default("PENDING")
  profileId     String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  applicationId String?
  profile       Profile      @relation(fields: [profileId], references: [id], onDelete: Cascade)
  Application   Application? @relation(fields: [applicationId], references: [id])

  @@index([profileId])
}

model StudentDocument {
  id        String   @id @default(cuid())
  type      String
  fileUrl   String
  status    String   @default("PENDING")
  profileId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model Course {
  id          String          @id @default(cuid())
  code        String          @unique
  name        String
  description String
  credits     Int
  capacity    Int
  facultyId   String?
  semester    String
  year        Int
  status      String          @default("OPEN")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  faculty     User?           @relation("FacultyCourses", fields: [facultyId], references: [id])
  sections    CourseSection[]
  enrollments Enrollment[]
  Course_A    Course[]        @relation("CoursePrerequisites")
  Course_B    Course[]        @relation("CoursePrerequisites")

  @@index([facultyId])
}

model CourseSection {
  id          String       @id @default(cuid())
  sectionCode String
  courseId    String
  schedule    String
  room        String
  maxStudents Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollments Enrollment[]

  @@unique([courseId, sectionCode])
  @@index([courseId])
}

model Enrollment {
  id        String         @id @default(cuid())
  studentId String
  courseId  String
  status    String         @default("PENDING")
  grade     String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  sectionId String?
  section   CourseSection? @relation(fields: [sectionId], references: [id])
  student   User           @relation("StudentEnrollments", fields: [studentId], references: [id])
  course    Course         @relation(fields: [courseId], references: [id])

  @@unique([studentId, courseId])
  @@index([studentId])
  @@index([courseId])
  @@index([sectionId])
}

model EnrollmentPeriod {
  id          String   @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FacultyInvitation {
  id        String   @id @default(cuid())
  email     String   @unique
  token     String   @unique
  expiresAt DateTime
  status    String   @default("PENDING")
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
